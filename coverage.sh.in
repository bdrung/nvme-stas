#!/usr/bin/env bash

# COVERAGE CURRENTLY ACHIEVED BY THIS SCRIPT:
# THIS WAS RUN ON FEDORA 35

# Results on Fedora 35 (5/3/2022) nvme-stas v1.1
#Name                  Stmts   Miss  Cover
#-----------------------------------------
#stacctl                  55      3    95%
#stacd                   160      6    96%
#stafctl                  77      3    96%
#stafd                   241     39    84%
#staslib/avahi.py        185     28    85%
#staslib/defs.py          21      0   100%
#staslib/glibudev.py      32      3    91%
#staslib/stas.py         791     76    90%
#staslib/version.py       34      0   100%
#-----------------------------------------
#TOTAL                  1596    158    90%

# Results on SLES 15 SP4 (6/10/2022) nvme-stas v1.1.3
# nvme-stas connected to real CDC.
#Name                 Stmts   Miss  Cover
#----------------------------------------
#stacctl                 55      3    95%
#stacd                  192      6    97%
#stafctl                 77      3    96%
#stafd                  246     25    90%
#staslib/avahi.py       186     23    88%
#staslib/defs.py         22      0   100%
#staslib/stas.py        864     64    93%
#staslib/version.py      32      0   100%
#----------------------------------------
#TOTAL                 1674    124    93%


PRIMARY_GRP=$( id -ng )
PRIMARY_USR=$( id -nu )
PYTHON_PATH=.:./subprojects/libnvme

log() {
    msg="$1"
    printf "%b[1;36m%s%b[0m\n" "\0033" "${msg}" "\0033"
    sudo logger -i "@@@@@  COVERAGE -" -p 4 "${msg}"
}

sd_stop() {
    app="$1"
    unit="${app}"-cov.service
    log "Stop ${app}"
    sudo systemctl stop "${unit}" >/dev/null 2>&1
    sudo systemctl reset-failed "${unit}" >/dev/null 2>&1
}

sd_restart() {
    app="$1"
    unit="${app}"-cov.service
    log "Restart ${app}"
    sudo systemctl restart "${unit}" >/dev/null 2>&1
}

sd_start() {
    app="$1"
    dbus="$2"
    conf="$3"
    unit="${app}"-cov.service

    if [ -z "${conf}" ]; then
        cmd="${app} --syslog"
    else
        cmd="${app} --syslog -f ${conf}"
    fi

    log "Start ${app}"

    RUNTIME_DIRECTORY=/tmp/${app}
    rm -rf ${RUNTIME_DIRECTORY}
    mkdir ${RUNTIME_DIRECTORY}

    sd_stop "${app}" # make sure it's not running already
    sudo systemd-run --unit="${unit}" --working-directory=. --property=Type=dbus --property=BusName="${dbus}" --setenv=PYTHONPATH=${PYTHON_PATH} --setenv=RUNTIME_DIRECTORY=${RUNTIME_DIRECTORY} coverage run --rcfile=.coveragerc ${cmd}
}

reload_cfg() {
    app="$1"
    unit="${app}"-cov.service
    pid=$( systemctl show --property MainPID --value "${unit}" )
    log "Reload config ${app}"
    sudo kill -HUP "${pid}"
}

if [ ! -d coverage ]; then
    mkdir coverage
fi

prerun_install() {
    for file in staf stac; do
        if [ ! -f "/usr/share/dbus-1/system.d/org.nvmexpress.${file}.conf" -a \
             ! -f "/etc/dbus-1/system.d/org.nvmexpress.${file}.conf" ]; then
            log "hardlink /etc/dbus-1/system.d/org.nvmexpress.${file}.conf -> @BUILD_DIR@/etc/dbus-1/system.d/org.nvmexpress.${file}.conf"
            sudo ln @BUILD_DIR@/etc/dbus-1/system.d/org.nvmexpress.${file}.conf /etc/dbus-1/system.d/org.nvmexpress.${file}.conf
            if [ $? -ne 0 ]; then
                log "hardlink failed"
                exit
            fi
        fi
    done
    sudo systemctl reload dbus.service
}

postrun_cleanup() {
    for file in staf stac; do
        if [ -f "/etc/dbus-1/system.d/org.nvmexpress.${file}.conf" ]; then
            if [ "$(stat -c %h -- "/etc/dbus-1/system.d/org.nvmexpress.${file}.conf")" -gt 1 ]; then
                log "Remove hardlink /etc/dbus-1/system.d/org.nvmexpress.${file}.conf"
                sudo rm "/etc/dbus-1/system.d/org.nvmexpress.${file}.conf"
            fi
        fi
    done
    sudo systemctl reload dbus.service
}


log "START-START-START-START-START-START-START-START-START-START-START-START"

prerun_install


################################################################################
# Load nvme kernel module
log "modprobe nvme-tcp"
sudo /usr/sbin/modprobe nvme-tcp

log "nvme disconnect-all"
sudo nvme disconnect-all

################################################################################
# Create a dummy config file for stafd
file=/tmp/stafd.conf.XXXXXX
log "Create dummy config file $file"
stafd_conf_fname=$(mktemp $file)
cat > "${stafd_conf_fname}" <<'EOF'
[Global]
tron=true
kato=10
ip-family=ipv6
johnny=be-good

[Discovery controller connection management]
persistent-connections=false
zeroconf-connections-persistence=1d

[Hello]
hello = bye
EOF

################################################################################
# Create a dummy config file for stacd
file=/tmp/stacd.conf.XXXXXX
log "Create dummy config file $file"
stacd_conf_fname=$(mktemp $file)
cat > "${stacd_conf_fname}" <<'EOF'
[Global]
tron=true
kato=10
udev-rule=enabled

[I/O controller connection management]
disconnect-scope=all-connections-matching-disconnect-trtypes
disconnect-trtypes=tcp+rdma
EOF

log "Stop & Mask Avahi daemon"
sudo systemctl stop avahi-daemon.service
sudo systemctl stop avahi-daemon.socket
sudo systemctl mask avahi-daemon.service
sudo systemctl mask avahi-daemon.socket
sleep 1


log "Invoking stafctl status while stafd is not running"
coverage run --rcfile=.coveragerc stafctl ls >/dev/null 2>&1
coverage run --rcfile=.coveragerc stafctl invalid-command >/dev/null 2>&1

log "Invoking stacctl status while stacd is not running"
coverage run --rcfile=.coveragerc stacctl ls >/dev/null 2>&1
coverage run --rcfile=.coveragerc stacctl invalid-command >/dev/null 2>&1

################################################################################
# Start stafd and stacd
sd_start "stafd" "@STAFD_DBUS_NAME@" "${stafd_conf_fname}"
sd_start "stacd" "@STACD_DBUS_NAME@" "${stacd_conf_fname}"
sleep 3

log "Invoking stafctl status"
coverage run --rcfile=.coveragerc stafctl status  >/dev/null 2>&1

reload_cfg "stafd"
sleep 1

log "Restart Avahi daemon"
sudo systemctl unmask avahi-daemon.socket
sudo systemctl unmask avahi-daemon.service
sudo systemctl start avahi-daemon.socket
sudo systemctl start avahi-daemon.service
sleep 2

log "Change stafd config: tron=true, persistent-connections=false, zeroconf=enable"
cat > "${stafd_conf_fname}" <<'EOF'
[Global]
tron=true

[Discovery controller connection management]
persistent-connections=false
zeroconf-connections-persistence=0.5

[Service Discovery]
zeroconf=enabled
EOF
reload_cfg "stafd"

sleep 1

log "Change stafd config: ip-family=ipv4, kato=10, adding multiple controllers"
cat > "${stafd_conf_fname}" <<'EOF'
[Global]
tron=true
ip-family=ipv4
kato=10

[Discovery controller connection management]
persistent-connections=false
zeroconf-connections-persistence=1:01

[Controllers]
controller = transport = tcp ; traddr = localhost ; ; ;
controller=transport=tcp;traddr=1.1.1.1
controller=transport=tcp;traddr=2.2.2.2
controller=transport=tcp;traddr=555.555.555.555
controller=transport=tcp;traddr=abracadabra
controller=
controller=trsvcid
controller=transport=rdma;traddr=!@#$
controller=transport=fc;traddr=21:00:00:00:00:00:00:00;host-traddr=20:00:00:00:00:00:00:00
controller=transport=XM;traddr=2.2.2.2
exclude=transport=tcp;traddr=1.1.1.1
exclude=transport=tcp;traddr=1000.1000.1000.1000
EOF
reload_cfg "stafd"


log "Change stacd config: tron=true, udev-rule=disabled, disconnect-scope=blah-blah, disconnect-trtypes=boing-boing"
cat > "${stacd_conf_fname}" <<'EOF'
[Global]
tron=true
udev-rule=disabled

[I/O controller connection management]
disconnect-scope=blah-blah
disconnect-trtypes=boing-boing
EOF
reload_cfg "stacd"
sleep 3

log "Invoking stafctl status"
coverage run --rcfile=.coveragerc stafctl status  >/dev/null 2>&1

################################################################################
# Fake mDNS packets from a CDC
log "Start Avahi publisher"
AVAHI_PUBLISHER=mdns_publisher.service
sudo systemctl stop ${AVAHI_PUBLISHER} >/dev/null 2>&1
sudo systemctl reset-failed ${AVAHI_PUBLISHER} >/dev/null 2>&1
sudo systemd-run --unit=${AVAHI_PUBLISHER} --working-directory=. avahi-publish -s SFSS _nvme-disc._tcp 8009 "p=tcp"
sleep 1

################################################################################
# Start nvme target simulator
log "Start nvmet"
sudo ../utils/nvmet/nvmet.py clean
sudo ../utils/nvmet/nvmet.py create -f ../utils/nvmet/nvmet.conf
sleep 2

reload_cfg "stafd"
reload_cfg "stacd"
sleep 3

################################################################################
log "Invoking stafd --version"
coverage run --rcfile=.coveragerc stafd --version

log "Invoking stacd --version"
coverage run --rcfile=.coveragerc stacd --version

################################################################################
# Stimulate D-Bus activity
log "Invoking stafctl --version"
sudo coverage run --rcfile=.coveragerc stafctl --version
log "Invoking stafctl with a bad command"
sudo coverage run --rcfile=.coveragerc stafctl blah
log "Invoking stafctl troff"
sudo coverage run --rcfile=.coveragerc stafctl troff
log "Invoking stafctl status"
coverage run --rcfile=.coveragerc stafctl status  >/dev/null 2>&1
log "Invoking stafctl tron"
sudo coverage run --rcfile=.coveragerc stafctl tron
log "Invoking stafctl ls"
coverage run --rcfile=.coveragerc stafctl ls -d   >/dev/null 2>&1
log "Invoking stafctl adlp"
coverage run --rcfile=.coveragerc stafctl adlp -d >/dev/null 2>&1
log "Invoking stafctl dlp"
coverage run --rcfile=.coveragerc stafctl dlp -t tcp -a ::1 -s 8009 >/dev/null 2>&1

log "Invoking stacctl --version"
sudo coverage run --rcfile=.coveragerc stacctl --version
log "Invoking stacctl with a bad command"
sudo coverage run --rcfile=.coveragerc stacctl blah
log "Invoking stacctl troff"
sudo coverage run --rcfile=.coveragerc stacctl troff
log "Invoking stacctl status"
coverage run --rcfile=.coveragerc stacctl status >/dev/null 2>&1
log "Invoking stacctl tron"
sudo coverage run --rcfile=.coveragerc stacctl tron
log "Invoking stacctl ls"
coverage run --rcfile=.coveragerc stacctl ls -d >/dev/null 2>&1

################################################################################
# Stimulate AENs activity by removing/restoring namespaces
log "Remove namespace: klingons"
sudo ../utils/nvmet/nvmet.py unlink -p 1 -s klingons
sleep 2
log "Invoking stacctl ls"
coverage run --rcfile=.coveragerc stacctl ls -d >/dev/null 2>&1

log "Restore namespace: klingons"
sudo ../utils/nvmet/nvmet.py link -p 1 -s klingons
sleep 2
log "Invoking stacctl ls"
coverage run --rcfile=.coveragerc stacctl ls -d >/dev/null 2>&1

################################################################################
# Stop Avahi Publisher
log "Stop Avahi publisher"
sudo systemctl stop ${AVAHI_PUBLISHER}
sleep 1

################################################################################
log "Restart Avahi publisher"
sudo systemd-run --unit=${AVAHI_PUBLISHER} --working-directory=. avahi-publish -s SFSS _nvme-disc._tcp 8009 "p=tcp"
sleep 2

################################################################################
# Make config changes for stafd
log "Empty configuration and disable zeroconf for stafd"
cat > "${stafd_conf_fname}" <<'EOF'
[Global]
tron=true

[Discovery controller connection management]
persistent-connections=false
zeroconf-connections-persistence=0.5

[Service Discovery]
zeroconf=disabled
EOF
reload_cfg "stafd"
sleep 1

################################################################################
# Make more config changes for stafd
log "Add single controller (::1) and re-enable zeroconf for stafd"
cat > "${stafd_conf_fname}" <<'EOF'
[Global]
tron=true

[Discovery controller connection management]
persistent-connections=false
zeroconf-connections-persistence=-1

[Controllers]
controller=transport=tcp;traddr=::1;trsvcid=8009
EOF
reload_cfg "stafd"
sleep 2

################################################################################
# Stop Avahi Publisher
log "Stop Avahi publisher"
sudo systemctl stop ${AVAHI_PUBLISHER}
sleep 2

################################################################################
# Remove one of the NVMe device's
log "Remove (disconnect) nvme1"
sudo nvme disconnect -d nvme1
sleep 2


################################################################################
sd_restart "stafd"
sd_restart "stacd"
sleep 1

log "Create invalid conditions for saving/loading stafd's last known config"
rm -rf "/tmp/stafd"
sd_stop "stafd"
sd_restart "stacd"
mkdir -p "/tmp/stafd"
sd_start "stafd" "@STAFD_DBUS_NAME@" "${stafd_conf_fname}"
sleep 2

################################################################################
# Stop everything and collect coverage stats
log "Stop stafd and stacd"
sd_stop "stafd"
sd_stop "stacd"
sleep 1

################################################################################
# Change ownership of files that were created as root
sudo chown -R "${PRIMARY_USR}":"${PRIMARY_GRP}" coverage  >/dev/null 2>&1
sudo chown -R "${PRIMARY_USR}":"${PRIMARY_GRP}" staslib/__pycache__  >/dev/null 2>&1
sudo chown -R "${PRIMARY_USR}":"${PRIMARY_GRP}" subprojects/libnvme/libnvme/__pycache__  >/dev/null 2>&1

log "nvme disconnect-all"
sudo nvme disconnect-all

log "Remove ${stafd_conf_fname} and ${stacd_conf_fname}"
rm "${stafd_conf_fname}"
rm "${stacd_conf_fname}"

log "Run unit test: test-avahi"
PYTHONPATH=${PYTHON_PATH} coverage run --rcfile=.coveragerc ../test/test-avahi.py
log "Run unit test: test-config"
PYTHONPATH=${PYTHON_PATH} coverage run --rcfile=.coveragerc ../test/test-config.py
log "Run unit test: test-controller"
PYTHONPATH=${PYTHON_PATH} coverage run --rcfile=.coveragerc ../test/test-controller.py
log "Run unit test: test-gtimer"
PYTHONPATH=${PYTHON_PATH} coverage run --rcfile=.coveragerc ../test/test-gtimer.py
log "Run unit test: test-iputil"
PYTHONPATH=${PYTHON_PATH} coverage run --rcfile=.coveragerc ../test/test-iputil.py
log "Run unit test: test-log"
PYTHONPATH=${PYTHON_PATH} coverage run --rcfile=.coveragerc ../test/test-log.py
log "Run unit test: test-nvme_options"
sudo PYTHONPATH=${PYTHON_PATH} coverage run --rcfile=.coveragerc ../test/test-nvme_options.py
log "Run unit test: test-service"
PYTHONPATH=${PYTHON_PATH} coverage run --rcfile=.coveragerc ../test/test-service.py
log "Run unit test: test-timeparse"
PYTHONPATH=${PYTHON_PATH} coverage run --rcfile=.coveragerc ../test/test-timeparse.py
log "Run unit test: test-transport_id"
PYTHONPATH=${PYTHON_PATH} coverage run --rcfile=.coveragerc ../test/test-transport_id.py
log "Run unit test: test-udev"
PYTHONPATH=${PYTHON_PATH} coverage run --rcfile=.coveragerc ../test/test-udev.py
log "Run unit test: test-version"
PYTHONPATH=${PYTHON_PATH} coverage run --rcfile=.coveragerc ../test/test-version.py

################################################################################
# Stop nvme target simulator
log "Stop nvmet"
sudo ../utils/nvmet/nvmet.py clean

log "Collect all coverage data"
coverage combine --rcfile=.coveragerc

log "Generating coverage report"
coverage report -i --rcfile=.coveragerc

log "Generating coverage report (HTML)"
coverage html -i --rcfile=.coveragerc


log "All done!!!"

postrun_cleanup
log "FINISHED-FINISHED-FINISHED-FINISHED-FINISHED-FINISHED-FINISHED-FINISHED"

